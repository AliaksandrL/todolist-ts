{"version":3,"sources":["serviceWorker.ts","AddItemForm.tsx","EditableSpan.tsx","TodoList.tsx","store/todolists-reducer.ts","store/tasks-reducer.ts","AppWithRedux.tsx","store/store.ts","index.tsx"],"names":["Boolean","window","location","hostname","match","AddItemForm","props","useState","title","setTitle","error","setError","addItem","trimmedTitle","trim","userMsg","style","color","TextField","value","onChange","event","currentTarget","onKeyPress","key","size","IconButton","onClick","AddBox","EditableSpan","editMode","setEditMode","offEditMode","changeTitle","onBlur","autoFocus","onDoubleClick","TodoList","tasksJSXElements","tasks","map","t","id","className","isDone","type","checked","e","changeTaskStatus","changeTaskTitle","removeTask","Delete","filter","changeTodoListTitle","removeTodoList","addTask","padding","listStyle","Button","variant","changeFilter","margin","initialState","AppWithRedux","v1","todoLists","useSelector","state","todolists","dispatch","useDispatch","taskID","todoListId","action","taskId","todolistId","addTaskAC","changeTaskStatusAC","changeTaskTitleAC","ChangeTodolistFilterAC","ChangeTodolistTitleAC","todoListsComponents","tl","tasksForTodoList","Grid","item","Paper","elevation","AppBar","position","Toolbar","justifyContent","edge","aria-label","Menu","Typography","Container","fixed","container","AddTodolistAC","spacing","rootReducer","combineReducers","task","newTask","copyState","todolist","find","store","createStore","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.596fe53d.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\r\nimport {IconButton, TextField} from \"@material-ui/core\";\r\nimport {AddBox} from \"@material-ui/icons\";\r\n\r\ntype AddItemFormFormPropsType = {\r\n    addItem: (title: string) => void\r\n}\r\n\r\nfunction AddItemForm(props: AddItemFormFormPropsType) {\r\n    const [title, setTitle] = useState<string>(\"\")\r\n    const [error, setError] = useState<boolean>(false)\r\n\r\n    const changeTitle = (event: ChangeEvent<HTMLInputElement>) => {\r\n        setError(false)\r\n        setTitle(event.currentTarget.value)\r\n    }\r\n    const addItem = () => {\r\n        const trimmedTitle = title.trim()\r\n        if (trimmedTitle) {\r\n            props.addItem(trimmedTitle)\r\n        } else {\r\n            setError(true)\r\n        }\r\n        setTitle(\"\")\r\n    }\r\n    const onKeyPressAddTask = (event: KeyboardEvent<HTMLInputElement>) => {\r\n        if (event.key === \"Enter\") {\r\n            addItem()\r\n        }\r\n    }\r\n    const userMsg = error ? <div style={{color: \"red\"}}>Title is required!</div> : null\r\n\r\n    return (\r\n        <div>\r\n            <TextField\r\n\r\n                value={title}\r\n                onChange={changeTitle}\r\n                onKeyPress={onKeyPressAddTask}\r\n                size={\"small\"}\r\n                error={error}\r\n            >\r\n                {/*className={error ? \"error\" : \"\"}*/}\r\n            </TextField>\r\n            {/*<input*/}\r\n            {/*    className={error ? \"error\" : \"\"}*/}\r\n            {/*    value={title}*/}\r\n            {/*    onChange={changeTitle}*/}\r\n            {/*    onKeyPress={onKeyPressAddTask}*/}\r\n            {/*/>*/}\r\n            <IconButton onClick={addItem}><AddBox/></IconButton>\r\n            {/*<button onClick={addItem}>+</button>*/}\r\n            {userMsg}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AddItemForm;","import React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\r\n\r\ntype EditableSpanPropsType = {\r\n    title: string\r\n    changeTitle: (title: string) => void\r\n}\r\n\r\nfunction EditableSpan(props: EditableSpanPropsType) {\r\n    const [editMode, setEditMode] = useState<boolean>(false)\r\n    const [title, setTitle] = useState<string>(props.title)\r\n\r\n    const changeTitle = (event: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(event.currentTarget.value)\r\n    }\r\n    const onEditMode = () => setEditMode(true)\r\n    const offEditMode = () => {\r\n        setEditMode(false)\r\n        props.changeTitle(title)\r\n    }\r\n    const onKeyPressAddMode = (event: KeyboardEvent<HTMLInputElement>) => {\r\n        if (event.key === \"Enter\") {\r\n            offEditMode()\r\n        }\r\n    }\r\n\r\n    return (\r\n        editMode\r\n            ? <input\r\n                onChange={changeTitle}\r\n                value={title}\r\n                onBlur={offEditMode}\r\n                onKeyPress={onKeyPressAddMode}\r\n                autoFocus\r\n            />\r\n            : <span onDoubleClick={onEditMode}>{props.title}</span>\r\n    )\r\n}\r\n\r\nexport default EditableSpan;","import React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\r\nimport {FilterValuesType} from \"./App\";\r\nimport AddItemForm from \"./AddItemForm\";\r\nimport EditableSpan from \"./EditableSpan\";\r\nimport {Button, Checkbox, IconButton} from \"@material-ui/core\";\r\nimport {Delete} from \"@material-ui/icons\";\r\n\r\ntype TodoListPropsType = {\r\n    id: string\r\n    title: string\r\n    filter: FilterValuesType\r\n    tasks: Array<TaskType>\r\n    removeTask: (taskID: string, todoListId: string) => void\r\n    changeFilter: (filter: FilterValuesType, todoListId: string) => void\r\n    changeTaskStatus: (taskID: string, isDone: boolean, todoListId: string) => void\r\n    addTask: (title: string, todoListId: string) => void\r\n    removeTodoList: (todoListId: string) => void\r\n    changeTaskTitle: (taskID: string, newTitle: string, todoListId: string) => void\r\n    changeTodoListTitle: (title: string, todoListId: string) => void\r\n}\r\n\r\nexport type TaskType = {\r\n    id: string\r\n    title: string\r\n    isDone: boolean\r\n}\r\n\r\nfunction TodoList(props: TodoListPropsType) {\r\n    const [title, setTitle] = useState<string>(\"\")\r\n    const [error, setError] = useState<boolean>(false)\r\n\r\n    const getTaskJSXElement = (t: TaskType) => {\r\n        const removeTask = () => props.removeTask(t.id, props.id)\r\n        const changeTaskStatus = (e: ChangeEvent<HTMLInputElement>) =>\r\n            props.changeTaskStatus(t.id, e.currentTarget.checked, props.id)\r\n        const changeTaskTitle = (title: string) => props.changeTaskTitle(t.id, title, props.id)\r\n        return (\r\n            <li key={t.id} className={t.isDone ? \"is-done\" : \"\"}>\r\n                {/*<Checkbox>*/}\r\n                {/*</Checkbox>*/}\r\n\r\n                <input\r\n                    type=\"checkbox\"\r\n                    checked={t.isDone}\r\n                    onChange={changeTaskStatus}\r\n                />\r\n                <EditableSpan title={t.title} changeTitle={changeTaskTitle}/>\r\n                <IconButton size={\"small\"} onClick={removeTask}><Delete/></IconButton>\r\n                {/*<button onClick={removeTask}>X</button>*/}\r\n            </li>\r\n        )\r\n    }\r\n    const tasksJSXElements = props.tasks.map(getTaskJSXElement)\r\n\r\n    // const addTask = () => {\r\n    //     const trimmedTitle = title.trim()\r\n    //     if (trimmedTitle){\r\n    //         props.addTask(trimmedTitle, props.id)\r\n    //     } else {\r\n    //         setError(true)\r\n    //     }\r\n    //     setTitle(\"\")\r\n    // }\r\n    // const changeTitle = (event: ChangeEvent<HTMLInputElement>) => {\r\n    //     setError(false)\r\n    //     setTitle(event.currentTarget.value)\r\n    // }\r\n    // const onKeyPressAddTask = (event: KeyboardEvent<HTMLInputElement>) => {\r\n    //     if(event.key === \"Enter\"){\r\n    //         addTask()\r\n    //     }\r\n    // }\r\n    const setAllFilterValue = () => props.changeFilter(\"all\", props.id)\r\n    const setActiveFilterValue = () => props.changeFilter(\"active\", props.id)\r\n    const setCompletedFilterValue = () => props.changeFilter(\"completed\", props.id)\r\n    const removeTodoList = () => props.removeTodoList(props.id)\r\n    const addTask = (title: string) => props.addTask(title, props.id)\r\n    const changeTodoListTitle = (title: string) => props.changeTodoListTitle(title, props.id)\r\n\r\n\r\n    const allBtnClass = props.filter === \"all\" ? \"active-filter\" : \"\"\r\n    const activeBtnClass = props.filter === \"active\" ? \"active-filter\" : \"\"\r\n    const completedBtnClass = props.filter === \"completed\" ? \"active-filter\" : \"\"\r\n    // const userMsg = error ? <div style={{color: \"red\"}}>Title is required!</div> : null\r\n\r\n    // JSX\r\n    return (\r\n        <div>\r\n            <h3>\r\n                <EditableSpan title={props.title} changeTitle={changeTodoListTitle}/>\r\n                <IconButton size={\"small\"} onClick={removeTodoList}><Delete/></IconButton>\r\n                {/*<button onClick={removeTodoList}>x</button>*/}\r\n            </h3>\r\n            <AddItemForm addItem={addTask}/>\r\n            {/*<div>*/}\r\n            {/*    <input*/}\r\n            {/*        className={error ? \"error\" : \"\"}*/}\r\n            {/*        value={title}*/}\r\n            {/*        onChange={changeTitle}*/}\r\n            {/*        onKeyPress={onKeyPressAddTask}*/}\r\n            {/*    />*/}\r\n            {/*    <button onClick={addTask}>+</button>*/}\r\n            {/*    {userMsg}*/}\r\n            {/*</div>*/}\r\n            <ul style={{padding: \"0px\", listStyle: \"none\"}}>\r\n                {tasksJSXElements}\r\n            </ul>\r\n            <div>\r\n                <Button\r\n                    size={\"small\"}\r\n                    variant=\"outlined\"\r\n                    color={props.filter === \"all\" ? \"secondary\" : \"primary\"}\r\n                    onClick={setAllFilterValue}\r\n                    style={{margin: \"0 3px\"}}\r\n                >All\r\n                </Button>\r\n                <Button\r\n                    variant=\"outlined\"\r\n                    color={props.filter === \"active\" ? \"secondary\" : \"primary\"}\r\n                    size={\"small\"}\r\n                    onClick={setActiveFilterValue}\r\n                >Active\r\n                </Button>\r\n                <Button\r\n                    size={\"small\"}\r\n                    variant=\"outlined\"\r\n                    color={props.filter === \"completed\" ? \"secondary\" : \"primary\"}\r\n                    onClick={setCompletedFilterValue}\r\n                >Completed\r\n                </Button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TodoList;","import {FilterValuesType, TodoListType} from '../App';\r\nimport {v1} from 'uuid';\r\n\r\nexport type RemoveTodolistActionType = {\r\n    type: 'REMOVE-TODOLIST'\r\n    id: string\r\n}\r\nexport type AddTodolistActionType = {\r\n    type: 'ADD-TODOLIST'\r\n    title: string\r\n    todolistId: string\r\n}\r\nexport type ChangeTodolistTitleActionType = {\r\n    type: 'CHANGE-TODOLIST-TITLE'\r\n    title: string\r\n    id: string\r\n\r\n}\r\nexport type ChangeTodolistFilterActionType = {\r\n    type: 'CHANGE-TODOLIST-FILTER'\r\n    id: string\r\n    filter: FilterValuesType\r\n}\r\nlet initialState: Array<TodoListType> = []\r\n\r\ntype ActionsType =\r\n    RemoveTodolistActionType\r\n    | AddTodolistActionType\r\n    | ChangeTodolistTitleActionType\r\n    | ChangeTodolistFilterActionType;\r\n\r\nexport const todoListsReducer = (state: Array<TodoListType> = initialState, action: ActionsType): Array<TodoListType> => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TODOLIST':\r\n            return state.filter(tl => tl.id != action.id)\r\n        case 'ADD-TODOLIST':\r\n            return [...state, {id: action.todolistId, title: action.title, filter: \"all\"}]\r\n        case 'CHANGE-TODOLIST-TITLE': {\r\n            const todolist = state.find(tl => tl.id === action.id);\r\n            if (todolist) {\r\n                // если нашёлся - изменим ему заголовок\r\n                todolist.title = action.title;\r\n            }\r\n            return [...state]\r\n        }\r\n        case 'CHANGE-TODOLIST-FILTER': {\r\n            const todolist = state.find(tl => tl.id === action.id);\r\n            if (todolist) {\r\n                // если нашёлся - изменим ему заголовок\r\n                todolist.filter = action.filter;\r\n            }\r\n            return [...state];\r\n        }\r\n        default:\r\n            // throw new Error(\"I don't understand this type\")\r\n            return state\r\n    }\r\n}\r\n\r\nexport const RemoveTodolistAC = (todolistId: string): RemoveTodolistActionType => {\r\n    return {type: 'REMOVE-TODOLIST', id: todolistId}\r\n}\r\nexport const AddTodolistAC = (title: string): AddTodolistActionType => {\r\n    return {type: 'ADD-TODOLIST', title, todolistId: v1()}\r\n}\r\nexport const ChangeTodolistTitleAC = ( title: string, todolistId: string): ChangeTodolistTitleActionType => {\r\n    return {type: 'CHANGE-TODOLIST-TITLE', title: title, id: todolistId}\r\n}\r\nexport const ChangeTodolistFilterAC = (todolistId: string, filter: FilterValuesType): ChangeTodolistFilterActionType => {\r\n    return {type: 'CHANGE-TODOLIST-FILTER', filter: filter, id: todolistId}\r\n}\r\n","import {TaskStateType, TodoListType} from \"../App\";\r\nimport {v1} from \"uuid\";\r\nimport {AddTodolistActionType, RemoveTodolistActionType} from \"./todolists-reducer\";\r\n\r\nexport type RemoveTaskActionType = {\r\n    type: 'REMOVE-TASK'\r\n    taskId: string\r\n    todolistId: string\r\n}\r\nexport type AddTaskActionType = {\r\n    type: 'ADD-TASK'\r\n    title: string\r\n    todolistId: string\r\n}\r\nexport type ChangeStatusActionType = {\r\n    type: 'CHANGE-TASK-STATUS'\r\n    taskId: string\r\n    isDone: boolean\r\n    todolistId: string\r\n}\r\nexport type ChangeTaskTitleActionType = {\r\n    type: 'CHANGE-TASK-TITLE'\r\n    taskId: string\r\n    title: string\r\n    todolistId: string\r\n}\r\n\r\nlet initialState: TaskStateType = {}\r\n\r\ntype ActionType = RemoveTaskActionType\r\n    | AddTaskActionType\r\n    | ChangeStatusActionType\r\n    | ChangeTaskTitleActionType\r\n    | AddTodolistActionType\r\n    | RemoveTodolistActionType\r\n\r\nexport const tasksReducer = (state: TaskStateType = initialState, action: ActionType): TaskStateType => {\r\n    switch (action.type) {\r\n        case \"REMOVE-TASK\":\r\n            return {...state, [action.todolistId]: state[action.todolistId].filter(task => task.id !== action.taskId)}\r\n        case \"ADD-TASK\":\r\n            let newTask = {id: v1(), title: action.title, isDone: false}\r\n            return {...state, [action.todolistId]: [newTask, ...state[action.todolistId]]}\r\n        case \"CHANGE-TASK-STATUS\":\r\n            return {\r\n                ...state, [action.todolistId]: state[action.todolistId].map(t => {\r\n                    if (action.taskId === t.id) {\r\n                        return {...t, isDone: action.isDone}\r\n                    } else {\r\n                        return t\r\n                    }\r\n                })\r\n            }\r\n        case \"CHANGE-TASK-TITLE\":\r\n            return {\r\n                ...state, [action.todolistId]: state[action.todolistId].map(t => {\r\n                    if (action.taskId === t.id) {\r\n                        return {...t, title: action.title}\r\n                    } else {\r\n                        return t\r\n                    }\r\n                })\r\n            }\r\n        case \"ADD-TODOLIST\":\r\n            return {...state, [action.todolistId]: []}\r\n        case \"REMOVE-TODOLIST\":\r\n            let copyState = {...state}\r\n            delete copyState[action.id]\r\n            return copyState\r\n        default:\r\n            // throw new Error(\"\")\r\n            return state\r\n    }\r\n}\r\n\r\nexport const removeTaskAC = (taskId: string, todolistId: string): RemoveTaskActionType => {\r\n    return {type: 'REMOVE-TASK', taskId, todolistId: todolistId}\r\n}\r\nexport const addTaskAC = (title: string, todolistId: string): AddTaskActionType => {\r\n    return {type: 'ADD-TASK', title, todolistId}\r\n}\r\nexport const changeTaskStatusAC = (taskId: string, isDone: boolean, todolistId: string): ChangeStatusActionType => {\r\n    return {type: 'CHANGE-TASK-STATUS', taskId, isDone, todolistId}\r\n}\r\nexport const changeTaskTitleAC = (taskId: string, title: string, todolistId: string): ChangeTaskTitleActionType => {\r\n    return {type: 'CHANGE-TASK-TITLE', taskId, title, todolistId}\r\n}\r\n\r\n","import React, {useReducer, useState} from 'react';\r\nimport './App.css';\r\nimport TodoList, {TaskType} from \"./TodoList\";\r\nimport {v1} from \"uuid\";\r\nimport AddItemForm from \"./AddItemForm\";\r\nimport {AppBar, Button, Container, Grid, IconButton, Paper, Toolbar, Typography} from \"@material-ui/core\";\r\nimport {Menu} from \"@material-ui/icons\";\r\nimport {\r\n    AddTodolistAC,\r\n    ChangeTodolistFilterAC,\r\n    ChangeTodolistTitleAC,\r\n    RemoveTodolistAC,\r\n    todoListsReducer\r\n} from \"./store/todolists-reducer\";\r\nimport {addTaskAC, changeTaskStatusAC, changeTaskTitleAC, removeTaskAC, tasksReducer} from \"./store/tasks-reducer\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"./store/store\";\r\n\r\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\"\r\nexport type TodoListType = {\r\n    id: string\r\n    title: string\r\n    filter: FilterValuesType\r\n}\r\nexport type TaskStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\nfunction AppWithRedux() {\r\n    // const todoListId_1 = v1()\r\n    // const todoListId_2 = v1()\r\n    // const [todoLists, dispatchToLists] = useReducer(todolistsReducer,[\r\n    //     {id: todoListId_1, title: \"What to learn\", filter: \"all\"},\r\n    //     {id: todoListId_2, title: \"What to buy\", filter: \"all\"},\r\n    // ])\r\n    // // console.log(typeof v1())\r\n    // const [tasks, dispatchToTasks] = useReducer(tasksReducer,{\r\n    //     [todoListId_1]: [\r\n    //         {id: v1(), title: \"HTML&CSS\", isDone: true},\r\n    //         {id: v1(), title: \"JS\", isDone: true},\r\n    //         {id: v1(), title: \"React\", isDone: false},\r\n    //     ],\r\n    //     [todoListId_2]: [\r\n    //         {id: v1(), title: \"Beer\", isDone: true},\r\n    //         {id: v1(), title: \"Fish\", isDone: true},\r\n    //         {id: v1(), title: \"meat\", isDone: false},\r\n    //     ],\r\n    // })\r\n    let todolistId1 = v1();\r\n    let todolistId2 = v1();\r\n\r\n    const todoLists = useSelector<AppRootStateType, Array<TodoListType>>(state => state.todolists)\r\n    const tasks = useSelector<AppRootStateType, TaskStateType>(state => state.tasks)\r\n    const dispatch = useDispatch();\r\n\r\n    const removeTask = (taskID: string, todoListId: string) => {\r\n        let action = removeTaskAC(taskID, todoListId)\r\n        dispatch(action)\r\n        // const todoListTasks = tasks[todoListId]\r\n        // tasks[todoListId] = todoListTasks.filter(t => t.id !== taskID)\r\n        // setTasks({...tasks})\r\n    }\r\n    const addTask = (title: string, todoListId: string) => {\r\n        let action = addTaskAC(title, todoListId)\r\n        dispatch(action)\r\n        // const newTask: TaskType = {\r\n        //     id: v1(),\r\n        //     title: title,\r\n        //     isDone: false\r\n        // }\r\n        // tasks[todoListId] = [newTask, ...tasks[todoListId]]\r\n        // setTasks({...tasks})\r\n    }\r\n    const changeTaskStatus = (taskID: string, isDone: boolean, todoListId: string) => {\r\n        let action = changeTaskStatusAC(taskID, isDone, todoListId)\r\n        dispatch(action)\r\n        // tasks[todoListId] = tasks[todoListId].map(t => t.id === taskID ? {...t, isDone: isDone} : t)\r\n        // setTasks({...tasks})\r\n    }\r\n    const changeTaskTitle = (taskID: string, title: string, todoListId: string) => {\r\n        let action = changeTaskTitleAC(taskID, title, todoListId)\r\n        dispatch(action)\r\n        // tasks[todoListId] = tasks[todoListId].map(t => t.id === taskID ? {...t, title: title} : t)\r\n        // setTasks({...tasks})\r\n    }\r\n    const changeFilter = (filter: FilterValuesType, todoListId: string) => {\r\n        dispatch(ChangeTodolistFilterAC(todoListId, filter))\r\n        // setTodoLists(todoLists.map(tl => tl.id === todoListId ? {...tl, filter: filter} : tl))\r\n    }\r\n    const removeTodoList = (todoListId: string) => {\r\n        let action = RemoveTodolistAC(todoListId)\r\n        dispatch(action)\r\n\r\n        // setTodoLists(todoLists.filter(tl => tl.id !== todoListId))\r\n        // const copyTasks = {...tasks}\r\n        // delete copyTasks[todoListId]\r\n        // setTasks(copyTasks)\r\n    }\r\n    const addTodoList = (title: string) => {\r\n        dispatch(AddTodolistAC(title))\r\n        // const newTodoListId = v1()\r\n        // setTodoLists([...todoLists, {id: newTodoListId, title, filter: \"all\"}])\r\n        // setTasks({...tasks, [newTodoListId]: []})\r\n    }\r\n    const changeTodoListTitle = (title: string, todoListId: string) => {\r\n        dispatch(ChangeTodolistTitleAC(title, todoListId))\r\n        // setTodoLists(todoLists.map(tl => tl.id === todoListId ? {...tl, title: title} : tl))\r\n    }\r\n\r\n\r\n    // GUI (CRUD):\r\n    const todoListsComponents = todoLists.map(tl => {\r\n        let tasksForTodoList = tasks[tl.id]\r\n        if (tl.filter === \"active\") {\r\n            tasksForTodoList = tasks[tl.id].filter(t => !t.isDone)\r\n        }\r\n        if (tl.filter === \"completed\") {\r\n            tasksForTodoList = tasks[tl.id].filter(t => t.isDone)\r\n        }\r\n        return (\r\n            <Grid item key={tl.id}>\r\n                <Paper elevation={5} style={{padding: \"15px\"}}>\r\n                    <TodoList\r\n                        key={tl.id}\r\n                        id={tl.id}\r\n                        filter={tl.filter}\r\n                        title={tl.title}\r\n                        tasks={tasksForTodoList}\r\n                        addTask={addTask}\r\n                        removeTask={removeTask}\r\n                        changeFilter={changeFilter}\r\n                        changeTaskStatus={changeTaskStatus}\r\n                        removeTodoList={removeTodoList}\r\n                        changeTaskTitle={changeTaskTitle}\r\n                        changeTodoListTitle={changeTodoListTitle}\r\n                    />\r\n                </Paper>\r\n            </Grid>\r\n        )\r\n    })\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <AppBar position=\"static\">\r\n                <Toolbar style={{justifyContent: \"space-between\"}}>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\">\r\n                        Todolists\r\n                    </Typography>\r\n                    <Button\r\n                        variant={\"outlined\"}\r\n                        color=\"inherit\"\r\n                    >\r\n                        Login\r\n                    </Button>\r\n                </Toolbar>\r\n            </AppBar>\r\n            <Container fixed>\r\n                <Grid container style={{padding: \"20px\"}}>\r\n                    <AddItemForm addItem={addTodoList}/>\r\n                </Grid>\r\n                <Grid container spacing={5}>\r\n                    {todoListsComponents}\r\n                </Grid>\r\n            </Container>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default AppWithRedux;\r\n","import {tasksReducer} from './tasks-reducer';\r\nimport {todoListsReducer} from './todolists-reducer';\r\nimport {combineReducers, createStore} from 'redux';\r\n\r\n// объединяя reducer-ы с помощью combineReducers,\r\n// мы задаём структуру нашего единственного объекта-состояния\r\nconst rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todolists: todoListsReducer\r\n})\r\n// непосредственно создаём store\r\nexport const store = createStore(rootReducer);\r\n// определить автоматически тип всего объекта состояния\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n// а это, чтобы можно было в консоли браузера обращаться к store в любой момент\r\n// @ts-ignore\r\nwindow.store = store;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport AppWithRedux from \"./AppWithRedux\";\r\nimport {store} from \"./store/store\";\r\nimport {Provider} from \"react-redux\";\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n    <AppWithRedux/>\r\n</Provider>, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}